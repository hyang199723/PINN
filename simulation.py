# Simulate a stationary process and apply NN#%% Packagesimport syswk_dir = "/Users/hongjianyang/PINN_SPDE/"sys.path.append(wk_dir)import torchimport numpy as npimport matplotlib.pyplot as pltimport pandas as pdimport numpy as npimport randomfrom sklearn.metrics import pairwise_distancesfrom sklearn.model_selection import train_test_splitimport torch.nn as nnimport torch.optim as optimfrom spde import *if torch.cuda.is_available():    device = torch.device('cuda')else:    device = torch.device('cpu')    #%% Generate dataN = 200rho = 3vvv = 2X, Y = gen_non_same(N, rho, vvv)plt.scatter(X[:,1], X[:,2], s = 20, c = Y)plt.colorbar()X_train, X_test, y_train, y_test = random_split(X, Y)# PINNlayers = [3, 100, 100, 100]pr_train_layers = [3, 100, 100, 100]#y[s,t] = (W[t,]*Z[s,]) + e#Z[s,k] = NN as a function slayers = [3, 100, 100, 100]last = [100 , 1]lr = 0.01epochs = 40000model = model_train_pinn(X_train, y_train, layers, lr, epochs)X_test = torch.from_numpy(X_test).to(torch.float32)y_pred_tc = model(X_test)y_pred = y_pred_tc.detach().numpy().reshape(-1)mse = np.mean((y_pred - y_test)**2)# Plot testing dataplt.subplot(1,2,1)plt.scatter(X_test[:,1], X_test[:,2], s = 20, c = y_pred)plt.title("Predicted value")plt.subplot(1,2,2)plt.scatter(X_test[:,1], X_test[:,2], s = 20, c = y_test)plt.colorbar()plt.title("True value")plt.show()abs_diff = np.abs(y_pred - y_test)plt.scatter(X_test[:,1], X_test[:,2], s = 20, c = abs_diff)plt.colorbar()tit = "Absolute diff, mse = " + str(mse)plt.title(tit)#%%# Krigingy_pred = Kriging(X_train, X_test, y_train, N, vvv, rho)mse = np.mean((y_pred - y_test)**2)plt.subplot(1,2,1)plt.scatter(X_test[:,1], X_test[:,2], s = 20, c = y_pred)plt.title("Predicted value")plt.subplot(1,2,2)plt.scatter(X_test[:,1], X_test[:,2], s = 20, c = y_test)plt.colorbar()plt.title("True value")plt.show()abs_diff = np.abs(y_pred - y_test)plt.scatter(X_test[:,1], X_test[:,2], s = 20, c = abs_diff)plt.colorbar()tit = "Absolute diff, mse = " + str(mse)plt.title(tit)#%%# NNmodel2 = model_train_dnn(X_train, y_train, layers, lr, epochs, split = "random")y_pred_tc = model2(X_test)y_pred = y_pred_tc.detach().numpy().reshape(-1)plt.subplot(1,2,1)plt.scatter(X_test[:,1], X_test[:,2], s = 20, c = y_pred)plt.title("Predicted value")plt.subplot(1,2,2)plt.scatter(X_test[:,1], X_test[:,2], s = 20, c = y_test)plt.colorbar()plt.title("True value")plt.show()mse = np.mean((y_pred - y_test)**2)abs_diff = np.abs(y_pred - y_test)plt.scatter(X_test[:,1], X_test[:,2], s = 20, c = abs_diff)plt.colorbar()tit = "Absolute diff, mse = " + str(mse)plt.title(tit)#%% How testing MSE changes over sample size?Ns = [2**i*10 for i in range(3,8)]xx = len(Ns)iters = 10PINN_mse = [0] * xxNN_mse = [0] * xxKrig_mse = [0] * xxrho = 3vvv = 2layers = [3, 100, 100, 100, 1]lr = 0.01epochs = 30000for i in range(xx):    # Parameters and data    n = Ns[i]    X, Y = gen_non_same(n, rho, vvv)    X_train, X_test, y_train, y_test = random_split(X, Y)        # PINN    model = model_train_pinn(X_train, y_train, layers, lr, epochs)    X_test = torch.from_numpy(X_test).to(torch.float32)    y_pred_tc = model(X_test)    y_pred = y_pred_tc.detach().numpy().reshape(-1)    mse = np.mean((y_pred - y_test)**2)    PINN_mse[i] = mse        # NN    model2 = model_train_dnn(X_train, y_train, layers, lr, epochs, split = "random")    y_pred_tc = model2(X_test)    y_pred = y_pred_tc.detach().numpy().reshape(-1)    mse = np.mean((y_pred - y_test)**2)    NN_mse[i] = mse        # Kriging    y_pred = Kriging(X_train, X_test, y_train, n, vvv, rho)    mse = np.mean((y_pred - y_test)**2)    Krig_mse[i] = mse#%%plt.plot(Ns, Krig_mse, label = "Kriging") plt.plot(Ns, NN_mse, label = "NN") plt.plot(Ns, PINN_mse, label = "PINN") plt.legend() plt.show()