#%% Packages
import sys
wk_dir = "/r/bb04na2a.unx.sas.com/vol/bigdisk/lax/hoyang/PINN/"
sys.path.append(wk_dir)
import torch
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import random
import torch.nn as nn
import torch.optim as optim
from scipy.special import gamma, kn
if torch.cuda.is_available():
    device = torch.device('cuda:1')
else:
    device = torch.device('cpu')
import scipy.stats as stats
import pylab
from spde import *
import GPy

N = 1000 ##Sample Size
P = 1 ##Covariates
M = 100 ##replicates
X = np.array([np.ones(N)]).T ##Design matrix
kernel = GPy.kern.Exponential(1,1,0.1) ##Covariance Function
noise_var = 0.01 ##Nugget variance
# 1000 points evenly spaced over [0,1]
s = np.linspace(0,1,N).reshape(-1,1)
mu = np.ones(N).reshape(-1,1) # vector of the means
nugget = np.eye(N) * noise_var ##Nugget matrix
cov_mat = kernel.K(s) + nugget ##Covariance matrix
# Generate M sample path with mean mu and covariance C
np.random.seed(1)
y = np.random.multivariate_normal(mu[:,0],cov_mat,M).T
##Visualization
plt.plot(s,y[:,0],".",mew=1.5)
plt.show()### Create a neural network with three hidden layers
#plt.savefig("trueGP.pdf")

#alphas = [0]# 0, 10, 100, 1000, 
# Number of layers and neurons
#layers = 3
neurons = 100
layers = [6]
iters = 10 # 10-fold CV
MSE = pd.DataFrame(data = 0.0, index = range(iters), columns = layers)
lr = 0.001 # default learning rate in keras adam
nnn = 5000 # Numbr of discrete grid of points to evaluate kde
lower = -800
upper = 800
KL_params = [nnn, lower, upper]
x = np.linspace(lower, upper, nnn) # Define the range over which to evaluate the KDE and theoretical PDF
theoretical_pdf = norm.pdf(x, 0, 202)
rho = 0.2
#num_centers = [10**2,19**2,37**2]
num_centers = [20**2,38**2,70**2]

eee = 1500 # NN iterations
X = s
Y = y
for i in range(iters):
    print(i)
    X_train, X_val, X_test, y_train, y_val, y_test = random_split_val(X, Y)
    for idx, layer in enumerate(layers):
        model_1, density, W = RBF_train(X_train, X_val, y_train, y_val, lr=lr, epochs=eee, alpha = 10,
                          device = device, n_centers=num_centers, 
                          theory = theoretical_pdf, rho = rho, kl_params = KL_params,
                          layers = layer, neurons=neurons)
        X_test_tc = torch.tensor(X_test).float().to(device)
        y0_model1 = model_1(X_test_tc).cpu().detach().numpy().reshape(-1)
        model1_mse = np.mean((y_test - y0_model1)**2)
        MSE.iloc[i, idx] = model1_mse
#MSE.to_csv(wk_dir + "Output_correct/DK_Compare_centers.csv")
# %%
