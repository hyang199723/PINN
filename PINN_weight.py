# How the weight parameter might affect the performance of PINN# Simulate a stationary process and apply NN#%% Packagesimport syswk_dir = "/Users/hongjianyang/PINN_SPDE/"sys.path.append(wk_dir)import torchimport numpy as npimport matplotlib.pyplot as pltimport pandas as pdimport numpy as npimport randomfrom sklearn.metrics import pairwise_distancesfrom sklearn.model_selection import train_test_splitimport torch.nn as nnimport torch.optim as optimfrom spde import *if torch.cuda.is_available():    device = torch.device('cuda')else:    device = torch.device('cpu')    #%% Generate dataN = 200rho = 3vvv = 2X, Y = gen_non_same(N, rho, vvv)plt.scatter(X[:,1], X[:,2], s = 20, c = Y)plt.colorbar()X_train, X_test, y_train, y_test = random_split(X, Y)alphas = [0, 0.1, 0.5, 1, 2, 6, 30]iters = 5 # Number of replications for each alphannn = len(alphas)MSE = np.zeros(nnn)layers = [3, 100, 100, 100, 1]lr = 0.01epochs = 25000X_test = torch.from_numpy(X_test).to(torch.float32)for i in range(0, nnn):    for j in range(0, iters):        print(i)        print(j)        alpha = alphas[i]        model = model_train_pinn(X_train, y_train, layers, lr, epochs, alpha)        y_pred_tc = model(X_test)        y_pred = y_pred_tc.detach().numpy().reshape(-1)        mse = np.mean((y_pred - y_test)**2)        MSE[i] += mse#%%temp = MSE / itersplt.plot(alphas, temp)