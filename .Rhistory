sum(sample(1:6, 2, replace = T))
t.test2(m1, 0.1476, s1, 0.0082, n1, n2)
t.test2 <- function(m1,m2,s1,s2,n1,n2,m0=0,equal.variance=FALSE)
{
if( equal.variance==FALSE )
{
se <- sqrt( (s1^2/n1) + (s2^2/n2) )
# welch-satterthwaite df
df <- ( (s1^2/n1 + s2^2/n2)^2 )/( (s1^2/n1)^2/(n1-1) + (s2^2/n2)^2/(n2-1) )
} else
{
# pooled standard deviation, scaled by the sample sizes
se <- sqrt( (1/n1 + 1/n2) * ((n1-1)*s1^2 + (n2-1)*s2^2)/(n1+n2-2) )
df <- n1+n2-2
}
t <- (m1-m2-m0)/se
dat <- c(m1-m2, se, t, 2*pt(-abs(t),df))
names(dat) <- c("Difference of means", "Std Error", "t", "p-value")
return(dat)
}
m1 = 0.1569
s1 = 0.0113
n1 = n2 = 100
t.test2(m1, 0.1476, s1, 0.0082, n1, n2)
m1 = 0.5238
s1 = 0.0689
n1 = n2 = 100
t.test2(m1, 0.3521, s1, 0.113, n1, n2)
m1 = 0.5238
s1 = 0.0689
n1 = n2 = 100
t.test2(m1, 0.4295, s1, 0.0593, n1, n2)
m1 = 0.1569
s1 = 0.0113
n1 = n2 = 100
t.test2(m1, 0.1507, s1, 0.0077, n1, n2)
t.test2(m1, 0.1552, s1, 0.0077, n1, n2)
m1 = 0.3307
s1 = 0.0202
n1 = n2 = 100
t.test2(m1, 0.3279, s1, 0.0215, n1, n2)
t.test2(m1, 0.2843, s1, 0.0209, n1, n2)
w = 1; x = -2; y = 3; z = 4
a1 = 1
a2 = 2
a3 = 3
a4 = 4
a5 = 5
a6 = 6
a7 = 7
a8 = 8
g = rep(rev(c(w,x,y,z)), 2)
v = c(a1,a2,a3,a4,a5,a6,a7,a8)
r = unsplit(lapply(split(v, g), max), c(w,y,x,z))
r
w = 1; x = -2; y = 3; z = 4
a1 = 1
a2 = 2
a3 = 3
a4 = 4
a5 = 5
a6 = 6
a7 = 7
a8 = 8
g = rep(rev(c(w,x,y,z)), 2)
v = c(a1,a2,a3,a4,a5,a6,a7,a8)
r = unsplit(lapply(split(v, g), max), c(w,y,x,z))
w = 1; x = -2; y = 3; z = 4
a1 = 1
a2 = 2
a3 = 3
a4 = 4
a5 = 5
a6 = 6
a7 = 7
a8 = 8
g = rep(rev(c(w,x,y,z)), 2)
v = c(a1,a2,a3,a4,a5,a6,a7,a8)
r = unsplit(lapply(split(v, g), max), c(w,y,x,z))
r
w = 1; x = -2; y = 3; z = 4
a1 = 1
a2 = 2
a3 = 3
a4 = 4
a5 = 5
a6 = 6
a7 = 7
a8 = 8
g = rep(rev(c(w,x,y,z)), 2)
v = c(a1,a2,a3,a4,a5,a6,a7,a8)
r = unsplit(lapply(split(v, g), max), c(w,y,x,z))
r
w = 1; x = -2; y = 3; z = 4
a1 = 1
a2 = 2
a3 = 3
a4 = 4
a5 = 5
a6 = 6
a7 = 7
a8 = 8
g = rep(rev(c(w,x,y,z)), 2)
v = c(a1,a2,a3,a4,a5,a6,a7,a8)
r = unsplit(lapply(split(v, g), max), c(w,y,x,z))
r
w = 1; x = -2; y = 3; z = 4
a1 = 1
a2 = 2
a3 = 3
a4 = 4
a5 = 5
a6 = 6
a7 = 7
a8 = 8
g = rep(rev(c(w,x,y,z)), 2)
v = c(a1,a2,a3,a4,a5,a6,a7,a8)
r = unsplit(lapply(split(v, g), max), c(w,y,x,z))
r
w = 1; x = -2; y = 3; z = 4
a1 = 1
a2 = 10
a3 = 3
a4 = 4
a5 = 5
a6 = 6
a7 = 7
a8 = 8
g = rep(rev(c(w,x,y,z)), 2)
v = c(a1,a2,a3,a4,a5,a6,a7,a8)
r = unsplit(lapply(split(v, g), max), c(w,y,x,z))
r
w = 1; x = -2; y = 3; z = 4
a1 = 1
a2 = 13
a3 = 3
a4 = 4
a5 = 5
a6 = 6
a7 = 7
a8 = 8
g = rep(rev(c(w,x,y,z)), 2)
v = c(a1,a2,a3,a4,a5,a6,a7,a8)
r = unsplit(lapply(split(v, g), max), c(w,y,x,z))
r
w = 1; x = -2; y = 3; z = 4
a1 = 1
a2 = 13
a3 = 3
a4 = 4
a5 = 5
a6 = 6
a7 = 7
a8 = 8
g = rep(rev(c(w,x,y,z)), 2)
v = c(a1,a2,a3,a4,a5,a6,a7,a8)
r = unsplit(lapply(split(v, g), max), c(w,y,x,z))
r
w = 1; x = -2; y = 3; z = 4
a1 = 1
a2 = 13
a3 = 3
a4 = 4
a5 = 5
a6 = 6
a7 = 7
a8 = 8
g = rep(rev(c(w,x,y,z)), 2)
v = c(a1,a2,a3,a4,a5,a6,a7,a8)
r = unsplit(lapply(split(v, g), max), c(w,y,x,z))
r
w = 1; x = -2; y = 3; z = 4
a1 = 1
a2 = 13
a3 = 3
a4 = 4
a5 = 5
a6 = 6
a7 = 7
a8 = 8
g = rep(rev(c(w,x,y,z)), 2)
v = c(a1,a2,a3,a4,a5,a6,a7,a8)
r = unsplit(lapply(split(v, g), max), c(w,y,x,z))
r
w = 1; x = -2; y = 3; z = 4
a1 = 1
a2 = 13
a3 = 3
a4 = 4
a5 = 5
a6 = 6
a7 = 7
a8 = 8
g = rep(rev(c(w,x,y,z)), 2)
v = c(a1,a2,a3,a4,a5,a6,a7,a8)
r = unsplit(lapply(split(v, g), max), c(w,y,x,z))
r
w = 1; x = -2; y = 3; z = 4
a1 = 1
a2 = 13
a3 = 3
a4 = 4
a5 = 15
a6 = 6
a7 = 7
a8 = 8
g = rep(rev(c(w,x,y,z)), 2)
v = c(a1,a2,a3,a4,a5,a6,a7,a8)
r = unsplit(lapply(split(v, g), max), c(w,y,x,z))
r
w = 1; x = -2; y = 3; z = 4
a1 = 1
a2 = 13
a3 = 3
a4 = 4
a5 = 15
a6 = 6
a7 = 7
a8 = 8
g = rep(rev(c(w,x,y,z)), 2)
v = c(a1,a2,a3,a4,a5,a6,a7,a8)
r = unsplit(lapply(split(v, g), max), c(w,y,x,z))
r
w = 1; x = -2; y = 3; z = 4
a1 = 1
a2 = 5
a3 = 3
a4 = 4
a5 = 15
a6 = 6
a7 = 7
a8 = 8
g = rep(rev(c(w,x,y,z)), 2)
v = c(a1,a2,a3,a4,a5,a6,a7,a8)
r = unsplit(lapply(split(v, g), max), c(w,y,x,z))
r
library(combinat)
install.packages("combinat")
library(combinat)
permn(1:24)
a = 1:24
a
permn(a)
sample(1:24, 24)
sample(a)
sample(1:21,24)
sample(1:21)
sample(1:24, 24)
sample(1:24, 24, replace = FALSE)
sample(1:24, 24, replace = F)
setwd("/Users/hongjianyang/PINN/")
library(ggplot2)
library(viridis)
library(GpGp)
dat = read.csv("Data/matern_02_1_1.csv")
# GPGP
setwd("/Users/hongjianyang/PINN/")
library(ggplot2)
library(viridis)
library(GpGp)
dat = read.csv("Data/matern_02_1_1.csv")
data = as.matrix(dat)
dimension = c(1300, 3, 100)
data_3d <- array(data = data_matrix, dim = dimension)
# GPGP
setwd("/Users/hongjianyang/PINN/")
library(ggplot2)
library(viridis)
library(GpGp)
dat = read.csv("Data/matern_02_1_1.csv")
dat = as.matrix(dat)
dimension = c(1300, 3, 100)
data_3d <- array(data = dat, dim = dimension)
data_3d.shape
size(data_3d)
dim(data_3d)
full = data_3d[,,i]
i = 1
full = data_3d[,,i]
dim(full)
full = data_3d[1:1000,,i]
dim(full)
full = data_3d[1:1000,,i]
colnames(full) <- c("Lon", "Lat", "y")
train_row = sample(1:1000, 800)
train = full[train_row, ]
test = full[-train_row, ]
rownames(train) = NULL
rownames(test) = NULL
train_loc = as.matrix(train[, 1:2])
test_loc = as.matrix(test[, 1:2])
train_x = cbind(rep(1, 800), train[, 1:2])
test_x = cbind(rep(1, 200), test[, 1:2])
fit <- fit_model(train$y, train_loc, train_x, "matern_isotropic")
train
full = as.data.frame(data_3d[1:1000,,i])
colnames(full) <- c("Lon", "Lat", "y")
train_row = sample(1:1000, 800)
train = full[train_row, ]
test = full[-train_row, ]
rownames(train) = NULL
rownames(test) = NULL
train_loc = as.matrix(train[, 1:2])
test_loc = as.matrix(test[, 1:2])
train_x = cbind(rep(1, 800), train[, 1:2])
test_x = cbind(rep(1, 200), test[, 1:2])
fit <- fit_model(train$y, train_loc, train_x, "matern_isotropic")
summary(fit)
fit$covparms
params = fit$covparms
vvv = params[1]
range = params[2]
smooth = params[3]
nugget = params[4]
vvv
range
smooth
nugget
train$y
var(train$y)
train$y
nugget
vvv
# GPGP
setwd("/Users/hongjianyang/PINN/")
library(ggplot2)
library(viridis)
library(GpGp)
dat = read.csv("Data/matern_02_1_1.csv")
dat = as.matrix(dat)
N = 1300
dimension = c(N, 3, 100)
data_3d <- array(data = dat, dim = dimension)
i = 2
full = as.data.frame(data_3d[1:1000,,i])
colnames(full) <- c("Lon", "Lat", "y")
train_row = sample(1:1000, 800)
train = full[train_row, ]
test = full[-train_row, ]
rownames(train) = NULL
rownames(test) = NULL
train_loc = as.matrix(train[, 1:2])
test_loc = as.matrix(test[, 1:2])
train_x = cbind(rep(1, 800), train[, 1:2])
test_x = cbind(rep(1, 200), test[, 1:2])
fit <- fit_model(train$y, train_loc, train_x, "matern_isotropic")
# covparams: variance, range, smoothness, nugget
params = fit$covparms
vvv = params[1]
range = params[2]
smooth = params[3]
nugget = params[4]
vvv
range
smooth
nugget
N = 1000
length <- 1
locs <- matrix(runif(N * 2, 0, length), ncol = 2)
y <- fast_Gp_sim(c(1, 0.2, 1, 0.1), "matern_isotropic",  locs )
# Matern isotropic variance, range, smoothness, nugget
full = data.frame(cbind(locs, y))
colnames(full) <- c("Lon", "Lat", "y")
train_row = sample(1:N, 800)
train = full[train_row, ]
test = full[-train_row, ]
fit <- fit_model(train$y, train_loc, train_x, "matern_isotropic")
fit$covparms
train_x
fit <- fit_model(train$y, train_loc, "matern_isotropic")
fit <- fit_model(train$y, train_loc, rep(1, 800), "matern_isotropic")
summary(fit)
fit$covparms
N = 1000
length <- 1
locs <- matrix(runif(N * 2, 0, length), ncol = 2)
y <- fast_Gp_sim(c(1, 0.2, 1, 0.1), "matern_isotropic",  locs)
# Matern isotropic variance, range, smoothness, nugget
fit <- fit_model(y, locs, rep(1, 800), "matern_isotropic")
#locs <- as.matrix( expand.grid( (1:50)/50, (1:50)/50 ) )
N = 1000
length <- 1
locs <- matrix(runif(N * 2, 0, length), ncol = 2)
y <- fast_Gp_sim(c(1, 0.2, 1, 0.1), "matern_isotropic",  locs, 500)
# Matern isotropic variance, range, smoothness, nugget
fit <- fit_model(y, locs, rep(1, N), "matern_isotropic")
N = 1000
length <- 1
locs <- matrix(runif(N * 2, 0, length), ncol = 2)
y <- fast_Gp_sim(c(1, 0.2, 1, 0.1), "matern_isotropic",  locs, 100)
# Matern isotropic variance, range, smoothness, nugget
fit <- fit_model(y, locs, rep(1, N), "matern_isotropic")
fit$covparms
# GPGP
setwd("/Users/hongjianyang/PINN/")
library(ggplot2)
library(viridis)
library(GpGp)
dat = read.csv("Data/matern_02_1_1.csv")
dat = as.matrix(dat)
N = 1300
dimension = c(N, 3, 100)
data_3d <- array(data = dat, dim = dimension)
i = 2
full = as.data.frame(data_3d[1:1000,,i])
colnames(full) <- c("Lon", "Lat", "y")
train_row = sample(1:1000, 800)
train = full[train_row, ]
test = full[-train_row, ]
rownames(train) = NULL
rownames(test) = NULL
train_loc = as.matrix(train[, 1:2])
test_loc = as.matrix(test[, 1:2])
train_x = cbind(rep(1, 800), train[, 1:2])
test_x = cbind(rep(1, 200), test[, 1:2])
fit <- fit_model(train$y, train_loc, train_x, "matern_isotropic",  m_seq = c(50, 100))
# covparams: variance, range, smoothness, nugget
params = fit$covparms
vvv = params[1]
range = params[2]
smooth = params[3]
nugget = params[4]
vvv
nugget
fit <- fit_model(train$y, train_loc, rep(1, 800), "matern_isotropic",  m_seq = c(50, 100))
# covparams: variance, range, smoothness, nugget
params = fit$covparms
vvv = params[1]
range = params[2]
smooth = params[3]
nugget = params[4]
nugget
vvv
# GPGP
setwd("/Users/hongjianyang/PINN/")
library(ggplot2)
library(viridis)
library(GpGp)
dat = read.csv("Data/matern_02_1_1.csv")
dat = as.matrix(dat)
N = 1300
dimension = c(N, 3, 100)
data_3d <- array(data = dat, dim = dimension)
i = 1
full = as.data.frame(data_3d[1:1000,,i])
colnames(full) <- c("Lon", "Lat", "y")
train_row = sample(1:1000, 800)
train = full[train_row, ]
test = full[-train_row, ]
rownames(train) = NULL
rownames(test) = NULL
train_loc = as.matrix(train[, 1:2])
test_loc = as.matrix(test[, 1:2])
fit <- fit_model(train$y, train_loc, rep(1, 800), "matern_isotropic",  m_seq = c(100, 200))
params
N = 1000
length <- 1
locs <- matrix(runif(N * 2, 0, length), ncol = 2)
y <- fast_Gp_sim(c(1, 0.2, 1, 0.1), "matern_isotropic",  locs, 30)
# Matern isotropic variance, range, smoothness, nugget
fit <- fit_model(y, locs, rep(1, N), "matern_isotropic")
fit$covparms
N = 1000
length <- 1
locs <- matrix(runif(N * 2, 0, length), ncol = 2)
y <- fast_Gp_sim(c(1, 0.2, 1, 0.1), "matern_isotropic",  locs, 30)
# Matern isotropic variance, range, smoothness, nugget
fit <- fit_model(y, locs, rep(1, N), "matern_isotropic")
N = 1000
length <- 1
locs <- matrix(runif(N * 2, 0, length), ncol = 2)
y <- fast_Gp_sim(c(1, 0.2, 1, 0.1), "matern_isotropic",  locs, 30)
# Matern isotropic variance, range, smoothness, nugget
fit <- fit_model(y, locs, rep(1, N), "matern_isotropic")
fit$covparms
N = 1000
length <- 1
locs <- matrix(runif(N * 2, 0, length), ncol = 2)
y <- fast_Gp_sim(c(1, 0.2, 1, 0.1), "matern_isotropic",  locs, 30)
# Matern isotropic variance, range, smoothness, nugget
fit <- fit_model(y, locs, rep(1, N), "matern_isotropic")
fit$covparms
# GPGP
setwd("/Users/hongjianyang/PINN/")
library(ggplot2)
library(viridis)
library(GpGp)
dat = read.csv("Data/matern_02_1_1.csv")
dat = as.matrix(dat)
N = 1300
dimension = c(N, 3, 100)
data_3d <- array(data = dat, dim = dimension)
i = 1
full = as.data.frame(data_3d[1:1000,,i])
colnames(full) <- c("Lon", "Lat", "y")
train_row = sample(1:1000, 800)
train = full[train_row, ]
test = full[-train_row, ]
rownames(train) = NULL
rownames(test) = NULL
train_loc = as.matrix(train[, 1:2])
test_loc = as.matrix(test[, 1:2])
fit <- fit_model(train$y, train_loc, rep(1, 800), "matern_isotropic",  m_seq = c(10, 30))
# covparams: variance, range, smoothness, nugget
params = fit$covparms
vvv = params[1]
range = params[2]
smooth = params[3]
nugget = params[4]
params
var(train$y)
?fit_model
